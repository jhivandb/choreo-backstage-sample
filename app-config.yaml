app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    guest:
      dangerouslyAllowOutsideDevelopment: true

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Deployment]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    # - type: file
    #   target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
  # Experimental: Always use the search method in UrlReaderProcessor.
  # New adopters are encouraged to enable it as this behavior will be the default in a future release.
  useUrlReadersSearch: true

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: https://127.0.0.1:58336
          customResources:
            - group: 'core.choreo.dev'
              apiVersion: 'v1'
              plural: 'components'
          skipTLSVerify: true
          skipMetricsLookup: true
          name: kind-choreo
          authProvider: 'serviceAccount'
          serviceAccountToken: eyJhbGciOiJSUzI1NiIsImtpZCI6IlFqUk01dzVCbGlnY2lYSkNBeXI5UGxhdzBsM1pTRXk0R1FmOEdpTFRMTmsifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNzQ0OTcyOTMwLCJpYXQiOjE3NDQ5NjkzMzAsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwianRpIjoiZmJiZDc3ZTMtZTk3OS00NmQ5LTg1ZDgtZGEwNGU4Y2M3YmJkIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJjaG9yZW8tc3lzdGVtIiwic2VydmljZWFjY291bnQiOnsibmFtZSI6ImNob3Jlby1jb250cm9sbGVyLW1hbmFnZXIiLCJ1aWQiOiJlOGMzZTM5ZS1lYzQ0LTRhYjctYTdlOC0yOTMyODdiM2YxOGIifX0sIm5iZiI6MTc0NDk2OTMzMCwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmNob3Jlby1zeXN0ZW06Y2hvcmVvLWNvbnRyb2xsZXItbWFuYWdlciJ9.ao_0EDp23pL-HIvGlVxbJY91liboA965W83gfHEnr32ncydhChLaAxXIEzUmSD3_Ayx4Q-3-lkUZNePGuQblTUvzA_Pw88DaPey5fV93y544LrFyqhC_W1tK66VCYTpr4hYRtv3za-6SlwIqKQgAfAyY0RhnMtXbgBLQ9vCRCWIoji6AK__pqqfzbYQls9OhZsPcdukwn8XYrTdt_gXz-SJPPpb5F87SZBPsbw-Eg1UqzvFvWpTRGnb6Yq9cF7F-PZkBDJdSJuOQSDwz4m0xFHhhkSZIX_FMJPkXiw8IsK329eH6pgPF1a-q0ipP-ay4Egidc_bsrBtq6phzTksW1Q
          # or leave blank to use the mounted credentials


# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: false

choreoIngestor:
  enabled: true
  taskRunner:
    frequency: 10
    timeout: 600
